openapi: 3.0.0
info:
  title: "Handmade beauty store API"
  description: "Handmade beauty store API description."
  version: "1.0.0"
servers:
  - url: http://localhost:3000/api  # Replace with your actual server URL
tags:
  - name: products
  - name: categories
  - name: users
components:
  schemas:
    CreateCategoryDto:
      type: object
      required:
        - name
      properties:
        name:
          type: string
          description: Name of Category
    UpdateCategoryDto:
      type: object
      required:
        - name
      properties:
        name:
          type: string
          description: Name of Category
    CreateProductDto:
      type: object
      required:
        - name
        - price
        - categoryId
      properties:
        name:
          type: string
          description: Name of the product
        price:
          type: number
          description: Price of the product
          minimum: 0.01
        rating:
          type: number
          description: Rating of the product (optional)
          minimum: 1
          maximum: 5
        weight:
          type: number
          description: Weight of the product (optional)
          minimum: 0
        features:
          type: string
          description: Features of the product (optional)
        description:
          type: string
          description: Description of the product (optional)
        usingFor:
          type: string
          description: What the product is used for (optional)
        ingredients:
          type: string
          description: Ingredients of the product (optional)
        productFeatures:
          type: string
          description: Product features (optional)
        warnings:
          type: string
          description: Warnings about the product (optional)
        categoryId:
          type: integer
          description: ID of the category the product belongs to
    UpdateProductDto:
      type: object
      properties:
        name:
          type: string
          description: Name of the product (optional)
        price:
          type: number
          description: Price of the product (optional)
          minimum: 0.01
        rating:
          type: number
          description: Rating of the product (optional)
          minimum: 1
          maximum: 5
        weight:
          type: number
          description: Weight of the product (optional)
          minimum: 0
        features:
          type: string
          description: Features of the product (optional)
        description:
          type: string
          description: Description of the product (optional)
        usingFor:
          type: string
          description: What the product is used for (optional)
        ingredients:
          type: string
          description: Ingredients of the product (optional)
        productFeatures:
          type: string
          description: Product features (optional)
        warnings:
          type: string
          description: Warnings about the product (optional)
    Category:
      type: object
      properties:
        id:
          type: integer
          description: ID of the category
        name:
          type: string
          description: name of the category
        createdAt:
          type: string
          description: date of creating
        updatedAt:
          type: string
          description: date of lats updating
    Product:
      type: object
      properties:
        id:
          type: integer
          description: ID of the product
        name:
          type: string
          description: Name of the product
        price:
          type: number
          description: Price of the product
        rating:
          type: number
          description: Rating of the product (optional)
        weight:
          type: number
          description: Weight of the product (optional)
        features:
          type: string
          description: Features of the product (optional)
        description:
          type: string
          description: Description of the product (optional)
        usingFor:
          type: string
          description: What the product is used for (optional)
        ingredients:
          type: string
          description: Ingredients of the product (optional)
        productFeatures:
          type: string
          description: Product features (optional)
        warnings:
          type: string
          description: Warnings about the product (optional)
        categoryId:
          type: integer
          description: ID of the category the product belongs to
        createdAt:
          type: string
          description: date of creating
        updatedAt:
          type: string
          description: date of last updating

    CreateUserDto:
      type: object
      required:
        - firstName
        - lastName
        - email
        - password
        - phone
      properties:
        firstName:
          type: string
          description: First name of the user
        lastName:
          type: string
          description: Last name of the user
        email:
          type: string
          description: User's email
        password:
          type: string
          description: User's password
        phone:
          type: string
          description: User's phone number
    UpdateUserDto:
      type: object
      properties:
        firstName:
          type: string
          description: First name of the user (optional)
        lastName:
          type: string
          description: Last name of the user (optional)
        email:
          type: string
          description: User's email (optional)
        password:
          type: string
          description: User's password (optional)
        phone:
          type: string
          description: User's phone number (optional)
    User:
      type: object
      properties:
        id:
          type: integer
          description: ID of the user
        firstName:
          type: string
          description: First name of the user
        lastName:
          type: string
          description: Last name of the user
        email:
          type: string
          description: User's email
        phone:
          type: string
          description: User's phone number

paths:
  /categories:
    get:
      summary: Get all categories
      description: "This endpoint retrieves all categories from the system."
      tags: [ categories ]
      responses:
        200:
          description: Categories retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Category'
    post:
      summary: Create a new category
      description: "This endpoint creates a new category in the system."
      tags: [ categories ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateCategoryDto'
      responses:
        '201':
          description: Category created successfully
          content:
            text/html:
              schema:
                type: string
                example: "Category with id:1 successfully created !"
        '400':
          description: Bad request (validation error)
        '500':
          description: Internal server error
  /categories/{id}:
    get:
      summary: Get a category by ID
      description: "This endpoint retrieves a specific category by its ID."
      tags: [ categories ]
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: ID of the category to retrieve
      responses:
        '200':
          description: Category retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
        '404':
          description: Category not found
        '500':
          description: Internal server error
    patch:
      summary: Update a category
      description: "This endpoint updates an existing category in the system."
      tags: [ categories ]
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: ID of the category to update
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateCategoryDto'
      responses:
        '200':
          description: Category updated successfully
          content:
            text/html:
              schema:
                type: string
                example: "Category with id:1 successfully updated!"

        '404':
          description: Category not found
        '500':
          description: Internal server error
    delete:
      summary: Delete a category
      description: "This endpoint deletes an existing category in the system."
      tags: [ categories ]
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: ID of the category to delete
      responses:
        '200':
          description: Category delete successfully
          content:
            text/html:
              schema:
                type: string
                example: "Category with id:1 successfully deleted!"

        '404':
          description: Category not found
        '500':
          description: Internal server error
  /products:
    post:
      summary: Create a new product
      description: "This endpoint creates a new product in the system."
      tags: [ products ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateProductDto'
      responses:
        '201':
          description: Product created successfully
          content:
            text/html:
              schema:
                type: string
                example: "Product with id:1 successfully created !"
        '400':
          description: Bad request (validation error)
        '500':
          description: Internal server error
    get:
      summary: Get all products
      description: "This endpoint retrieves all products from the system."
      tags: [ products ]
      responses:
        '200':
          description: Products retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Product'
        '500':
          description: Internal server error
  /products/{id}: # The curly braces indicate a path parameter
    get:
      summary: Get a product by ID
      description: "This endpoint retrieves a specific product by its ID."
      tags: [ products ]
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: ID of the product to retrieve
      responses:
        '200':
          description: Product retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '404':
          description: Product not found
        '500':
          description: Internal server error
    patch:
      summary: Update a product
      description: "This endpoint updates an existing product in the system."
      tags: [ products ]
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: ID of the product to update
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateProductDto'
      responses:
        '200':
          description: Product updated successfully
          content:
            text/html:
              schema:
                type: string
                example: "Product with id:1 successfully updated!"

        '404':
          description: Product not found
        '500':
          description: Internal server error
    delete:
      summary: Delete a product
      description: "This endpoint deletes an existing product in the system."
      tags: [ products ]
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: ID of the product to delete
      responses:
        '200':
          description: Product delete successfully
          content:
            text/html:
              schema:
                type: string
                example: "Product with id:1 successfully deleted!"

        '404':
          description: Product not found
        '500':
          description: Internal server error
  /users:
    post:
      summary: Create a new user
      description: "This endpoint creates a new user in the system."
      tags: [ users ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUserDto'
      responses:
        '201':
          description: User created successfully
          content:
            text/html:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Bad request (validation error)
        '500':
          description: Internal server error
    get:
      summary: Get all users
      description: "This endpoint retrieves all users from the system."
      tags: [ users ]
      responses:
        '200':
          description: Users retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        '500':
          description: Internal server error
  /users/{id}: # The curly braces indicate a path parameter
    get:
      summary: Get a user by ID
      description: "This endpoint retrieves a specific user by its ID."
      tags: [ users ]
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: ID of the user to retrieve
      responses:
        '200':
          description: User retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: User not found
        '500':
          description: Internal server error
    patch:
      summary: Update a user
      description: "This endpoint updates an existing user in the system."
      tags: [ users ]
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: ID of the user to update
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUserDto'
      responses:
        '200':
          description: User updated successfully
          content:
            text/html:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: User not found
        '500':
          description: Internal server error
    delete:
      summary: Delete a user
      description: "This endpoint deletes an existing user in the system."
      tags: [ users ]
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: ID of the user to delete
      responses:
        '200':
          description: User delete successfully
          content:
            text/html:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: User not found
        '500':
          description: Internal server error
    